//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Resources/Input Actions/InputActionsDefault.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputCustom
{
    public partial class @InputActionsDefault: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActionsDefault()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionsDefault"",
    ""maps"": [
        {
            ""name"": ""Global"",
            ""id"": ""7ebb506e-93e7-486f-88f4-ec79dd81cbc6"",
            ""actions"": [
                {
                    ""name"": ""GoNext"",
                    ""type"": ""Button"",
                    ""id"": ""652898f2-38b2-4a49-b9e3-141ca52630ed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""89d9fde0-4cb2-4cd9-a7aa-ba9a1735d8ad"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoNext"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InGame"",
            ""id"": ""ca76cf3d-c6b3-4c3f-9aee-7083f718fcee"",
            ""actions"": [
                {
                    ""name"": ""ClickCard"",
                    ""type"": ""Button"",
                    ""id"": ""063ac403-86ab-425d-bbec-52c92bb5a89c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""893cab9e-d687-4105-be1e-ec0384b09fb9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickCard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Global
            m_Global = asset.FindActionMap("Global", throwIfNotFound: true);
            m_Global_GoNext = m_Global.FindAction("GoNext", throwIfNotFound: true);
            // InGame
            m_InGame = asset.FindActionMap("InGame", throwIfNotFound: true);
            m_InGame_ClickCard = m_InGame.FindAction("ClickCard", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Global
        private readonly InputActionMap m_Global;
        private List<IGlobalActions> m_GlobalActionsCallbackInterfaces = new List<IGlobalActions>();
        private readonly InputAction m_Global_GoNext;
        public struct GlobalActions
        {
            private @InputActionsDefault m_Wrapper;
            public GlobalActions(@InputActionsDefault wrapper) { m_Wrapper = wrapper; }
            public InputAction @GoNext => m_Wrapper.m_Global_GoNext;
            public InputActionMap Get() { return m_Wrapper.m_Global; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GlobalActions set) { return set.Get(); }
            public void AddCallbacks(IGlobalActions instance)
            {
                if (instance == null || m_Wrapper.m_GlobalActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GlobalActionsCallbackInterfaces.Add(instance);
                @GoNext.started += instance.OnGoNext;
                @GoNext.performed += instance.OnGoNext;
                @GoNext.canceled += instance.OnGoNext;
            }

            private void UnregisterCallbacks(IGlobalActions instance)
            {
                @GoNext.started -= instance.OnGoNext;
                @GoNext.performed -= instance.OnGoNext;
                @GoNext.canceled -= instance.OnGoNext;
            }

            public void RemoveCallbacks(IGlobalActions instance)
            {
                if (m_Wrapper.m_GlobalActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGlobalActions instance)
            {
                foreach (var item in m_Wrapper.m_GlobalActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GlobalActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GlobalActions @Global => new GlobalActions(this);

        // InGame
        private readonly InputActionMap m_InGame;
        private List<IInGameActions> m_InGameActionsCallbackInterfaces = new List<IInGameActions>();
        private readonly InputAction m_InGame_ClickCard;
        public struct InGameActions
        {
            private @InputActionsDefault m_Wrapper;
            public InGameActions(@InputActionsDefault wrapper) { m_Wrapper = wrapper; }
            public InputAction @ClickCard => m_Wrapper.m_InGame_ClickCard;
            public InputActionMap Get() { return m_Wrapper.m_InGame; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InGameActions set) { return set.Get(); }
            public void AddCallbacks(IInGameActions instance)
            {
                if (instance == null || m_Wrapper.m_InGameActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InGameActionsCallbackInterfaces.Add(instance);
                @ClickCard.started += instance.OnClickCard;
                @ClickCard.performed += instance.OnClickCard;
                @ClickCard.canceled += instance.OnClickCard;
            }

            private void UnregisterCallbacks(IInGameActions instance)
            {
                @ClickCard.started -= instance.OnClickCard;
                @ClickCard.performed -= instance.OnClickCard;
                @ClickCard.canceled -= instance.OnClickCard;
            }

            public void RemoveCallbacks(IInGameActions instance)
            {
                if (m_Wrapper.m_InGameActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IInGameActions instance)
            {
                foreach (var item in m_Wrapper.m_InGameActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InGameActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public InGameActions @InGame => new InGameActions(this);
        public interface IGlobalActions
        {
            void OnGoNext(InputAction.CallbackContext context);
        }
        public interface IInGameActions
        {
            void OnClickCard(InputAction.CallbackContext context);
        }
    }
}
